@function generate_props($map, $extends) {
	$result: ();

	@each $entryKey, $entryValue in $map {
		$extend_maps: ();

		@each $extend in $extends {
			$extend_maps: append($extend_maps, $extend + $entryKey);
		}

		$result: map-merge(
			$result,
			(
				$entryKey: $extend_maps
			)
		);
	}

	@return $result;
}

/// `apply-props` is used to apply tabler styles to the yesvelte classes via:
/// 	.y-comp { @include apply-props($props) }
/// ...where `$props` is a possibly nested SASS map, the values of which specify
/// tabler classes to read the styles from (via @extend), and the keys build up
/// the target (yesvelte) class name, as demonstrated in the following example:
/// 
/// 	$props: (
/// 		null: '.tblr-null',     // the styles from .tblr-null also apply to .y-comp
/// 		header: '.tblr-header', // the styles from .tblr-header apply to .y-comp-header
/// 		mult: '.foo' '.bar',    // the styles from both .foo and .bar apply
/// 		wrapper: ( // the keys of nested maps are joined with a dash ('-'), e.g.
/// 			null: ...,     // .y-comp-wrapper
/// 			dropdown: ...  // .y-comp-wrapper-dropdown
/// 		)
/// 	)
/// 
/// Putting a map inside a `null` key is technically possible but not needed
/// 	$props: (
/// 		null: (  // <--- this line can safely be deleted
/// 			null: ...,
/// 			foo: ... ))
@mixin apply-props($mappings) {
	@each $key, $values in $mappings {
		$prefix: '-';

		@if $key== '' or $key==null {
			$prefix: '';
		}

		&#{$prefix}#{$key} {
			@if type-of($values) == 'map' {
				@include apply-props($values);
			} @else if type-of($values) == 'list' {
				@each $value in $values {
					@extend #{$value} !optional;
				}
			} @else {
				@extend #{$values} !optional;
			}
		}
	}
}
